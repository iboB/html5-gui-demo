<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
  <compatibility xmlns="urn:schemas-microsoft-com:compatibility.v1">
    <application>
      <!--The ID below indicates application support for Windows Vista -->
      <supportedOS Id="{e2011457-1546-43c5-a5fe-008deee3d3f0}"/>
      <!--The ID below indicates application support for Windows 7 -->
      <supportedOS Id="{35138b9a-5d96-4fbd-8e2d-a2440225f93a}"/>
      <!--The ID below indicates application support for Windows 8 -->
      <supportedOS Id="{4a2f28e3-53b9-4441-ba9c-d69d4a4a6e38}"/>
      <!--The ID below indicates application support for Windows 8.1 -->
      <supportedOS Id="{1f676c76-80e1-4239-95bb-83d0f6d0da78}"/>
      <!--
      The line below is explicitly commented out. Chromium works in mysterious ways which manifest (heh)
      in the following manner:
      When we add no compatiblity manifests to an application loading Chromium it disables the calling
      of some WinAPIs and runs in WindowsXP compatibility mode. This breaks multi-process mode.
      When Windows 10 is supported, and it runs on Windows 10, it enables some other WinAPIs in when
      rendering which break single-process mode. So in order to support both modes on Windows 10, we need
      to add a compatibility manifest to the exe, but explicitly leave out Windows 10 of the supported OS
      list.
      -->
      <!--The ID below indicates application support for Windows 10 -->
      <!-- <supportedOS Id="{8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a}"/> -->
    </application>
  </compatibility>
</assembly>
